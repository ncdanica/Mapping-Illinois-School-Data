{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 //testing toggling biology scores\
//this was one of the testing files for filtering subject layer data points by rating\
//didn't work out...\
\
<!DOCTYPE html>\
<html>\
<head>\
<meta name="description" content="Map1">\
  <meta charset=utf-8 />\
  <title>Biology</title>\
  <script src='https://api.tiles.mapbox.com/mapbox.js/v2.2.0/mapbox.js'>\
  </script>\
  <script src="jquery-csv.js"></script>\
  <link href='https://api.tiles.mapbox.com/mapbox.js/v2.2.0/mapbox.css' rel='stylesheet' />\
  <style>\
    body \{ margin:0; padding:0; \}\
    .map \{ position:absolute; top:0; bottom:0; width:100%; \}\
  </style>\
</head>\
<body>\
<style>\
.filter-ui \{\
  background:#fff;\
  position:absolute;\
  top:10px;\
  right:10px;\
  z-index:100;\
  padding:10px;\
  border-radius:3px;\
  \}\
</style>\
\
<nav id='Biology' class='filter-ui'></nav>\
<div id='Basic Map' class='map' </div>\
<script>\
L.mapbox.accessToken = 'pk.eyJ1IjoiZGtqYXljbzEiLCJhIjoiOWU4YzVkOWRlNGQyNGJkMDMzN2VlYjdhNWVlZGYwYzEifQ.7Gf824M7kOir0gnV-ZY7OQ';\
  \
var map = L.mapbox.map('Basic Map', 'dkjayco1.n710go8p').setView([40.0613, -89.3848], 7);\
  \
//layer with Icons showing Biology Score\
var filters = document.getElementById('Biology');\
  \
 map.featureLayer.on('ready', function() \{\
   // Collect the types of symbols in this layer. you can also just\
    // hardcode an array of types if you know what you want to filter on,\
    // like var types = ['foo', 'bar'];\
    var typesObj = \{\}, types = ["Biology"];\
    var features = map.featureLayer.getGeoJSON().features;\
    for (var i = 0; i < features.length; i++) \{\
      typesObj[features[i].properties['Biology']] = true;\
    \}\
    for (var k in typesObj) types.push(k);\
\
  var checkboxes = [];\
  // Create a filter interface.\
  for (var i = 0; i < types.length; i++) \{\
    // Create an an input checkbox and label inside.\
    var item = filters.appendChild(document.createElement('div'));\
    var checkbox = item.appendChild(document.createElement('input'));\
    var label = item.appendChild(document.createElement('label'));\
    checkbox.type = 'checkbox';\
    checkbox.id = types[i];\
    checkbox.checked = true;\
    // create a label to the right of the checkbox with explanatory text\
    label.innerHTML = types[i];\
    label.setAttribute('for', types[i]);\
    // Whenever a person clicks on this checkbox, call the update().\
    checkbox.addEventListener('change', update);\
    checkboxes.push(checkbox);\
  \}\
\
  // This function is called whenever someone clicks on a checkbox and changes\
  // the selection of markers to be displayed.\
  function update() \{\
    var enabled = \{\};\
    // Run through each checkbox and record whether it is checked. If it is,\
    // add it to the object of types to display, otherwise do not.\
    for (var i = 0; i < checkboxes.length; i++) \{\
      if (checkboxes[i].checked) enabled[checkboxes[i].id] = true;\
    \}\
    map.featureLayer.setFilter(function(feature) \{\
      // If this symbol is in the list, return true. if not, return false.\
      // The 'in' operator in javascript does exactly that: given a string\
      // or number, it says if that is in a object.\
      // 2 in \{ 2: true \} // true\
      // 2 in \{ \} // false\
      return (feature.properties['Biology'] in enabled);\
    \});\
  \}\
\});\
</script>\
</body>\
</html>}